#problem Specifications
A) the input data file. 
1. The first line is "level, word", then every line afterwords will consists of
a number {1,2,3} and a word.

2. No, the progrm first will ask the user what level: Easy, medium, hard,
they want to play. Then the program will creat a new file accordingly (will
take only words correspond to the chosen level), and will choose a random word
to start a game. 

4. The program will read the lines corresponding to the chosen level. 
The user will be able to change the level after each game, so it might well be
that the program will load all the data file during the run.

B) Keyboard interaaction)
1. Letters and numbers

2. Numbers will be only used to control the program like to start playing, or 
playing again after finishing a game or changing the level of the game. 
If the user enters a letter, the program will return whether or not this letter
is in the word of the game. If yes, it will print a message where these letters
appear in the correct indexes of the word.   

3. I will let the input "qq" to mean to stop running. Otherwise, a game will 
terminate when the user guesses the word correctly within 6 guesses or they will
lose, and be asked if they want to play another game. 

4. This example is from the Final Project Overview document as I am going to do 
the same program + drawing a hangman using ASCII art which is a simple list of 
ascii art elements.

What file will the words come from?   hangman
what level do you want to try?
1. Easy
2. Medium
3. Hard
3
This one is looking for a phrase:
______ ____ __ ___ ______ ____ __ ____
What is your guess?  e
There are 3 e's
______ ____ __ __e ______ ___e __ ___e
What is your guess?  a
There are 2 a's
A__a__ ____ __ __e ______ ___e __ ___e



#Problem Analysis

1. Yes. A game will need a dictionary to represent the word of the game.
The keys will be the letters of the word (without repetition) and
the values are lists of indexes of the corresponding letter (the key)

2. Yes. Values in the dictionary will be lists to allow repetition of a letter
in the word of the game. The message that will be printed after each guess from
the user will be a list to allow mutating it and changing its elements.   
 
3. In addition to the usual split(), strip(), lower() methods of strings, there
is the with statement that helps you do something with a file you open but 
without loading all of it in your program.




#Data Structure Design
1. I will use a dictionary to store the data about the word of the game. The keys
are the letters of the word and the values are the indexes of the corresponding 
letter(the key) in the word. The values are always lists to allow for repetitions.
The data that will be retreived from it is the indexes of a given letter.

2. We will have a list of the words that can be sued in a game. Other lists will 
be the values of the dictionary as mentioned above. Last one will be the 
variable/ message that will be printed during the game. 

3. All the data structures will come from (or will depend on) the data from the 
data file as the progream runs.



#Functional Design

creat_level(filename, level)
2. This functions takes a file name as an input as a string and creat a new file 
with the words belong to the input level, and returns the name of the resulting 
file.
3. Parameters:
filename: str. e.g. "words.txt", the function doesn't modify this parameter.
level: int. The function doesn't modify this parameter.
4. The funtion return the name of the newly created file.
5. None

word_to_dic(word)
2. This fucntion takes a string word and creat a dictionary where the keys are 
the letters of word (without repetition) and the values for each key is the 
indexes of that key in word. 
3. Parameters:
word: str. The function doesn't modify this parameter.
4. a dictionary where the keys are 
the letters of word (without repetition) and the values for each key is the 
indexes of that key in word. 
5. None.



dashed_word(word)
2. Takes a string word and returnes a list that when joined over empty string, 
it resemples word. e.g. input = "eat", output = ["-", "-", "-"]
3. Parameters:
word: str. The function doesn't modify this parameter.
4. a list that when joined over empty string, it resemples word.
5. None



update_dashed(list, letter, index)
2. This function puts letter in list[index]. If index is a list, it does that for
every element in index.
3. parameters:
list: a list, the function will modify this parameter.
letter: a str. The function will not modify this parameter.
index: a list. The function will not modify this parameter.
4. None.
5. None.






 